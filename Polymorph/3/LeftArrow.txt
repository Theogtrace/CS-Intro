package assignment4;



public class LeftArrow extends ShapeBase implements ShapeInterface
{
	private int base;
	private int tailLength;

    public LeftArrow( )
    {
        super( );
        base = 0;
        tailLength = 0;
    }
    public LeftArrow(int theOffset, int theBase)
    {
        super(theOffset);
        base = theBase;
    }
    
	public void set(int newbase) {
		if ((newbase % 2) != 0)
		base = newbase;
		else 
		base = newbase +1;
	}

	
	public void tail(int length) {
		tailLength = length;
		
	}
	public int getTail()
	{
		return tailLength;
	}
	

	public void drawHere() {
		 
		 drawBase();
		
		
	}
	private void drawBase()
	{
		int baselength = (base -1)/2;
		int stepNumber =0;
		int width = base - 1;
		int baseWidth =0;
		for(int count = 0; count < baselength;count++)
		{
			skipSpaces(getOffset( )); 
			if (stepNumber ==0)
			{
				skipSpaces(base );
			}
			else 
			{
				width = width -2;
				skipSpaces(width);
				System.out.print('*');
				baseWidth = baseWidth +2;
				skipSpaces(baseWidth);
				
			}
			stepNumber ++;
			System.out.println('*');
			
		}
		 skipSpaces(getOffset( ));
		 System.out.print('*');
		 skipSpaces(base -1);
	        for (int count = 0; count < getTail() + 1; count++)
	        {
	            System.out.print('*');
	        }
	       System.out.println();
	       width = width - 2;
	       baseWidth = baseWidth + 2;
	       stepNumber--;
	       for(int count = 0; count < baselength;count++)
			{
				skipSpaces(getOffset( )); 
				if (stepNumber ==0)
				{
					skipSpaces(base);
				}
				else 
				{
					width = width +2;
					skipSpaces(width);
					System.out.print('*');
					baseWidth = baseWidth -2;
					skipSpaces(baseWidth);
					
				}
				stepNumber --;
				System.out.println('*');
				
			}
	}
	
	 private static void skipSpaces(int number)
	    {
	        for (int count = 0; count < number; count++)
	            System.out.print(' ');
	    }
}
	